import cv2
import numpy as np
import torch
from transformers import DetrImageProcessor, DetrForObjectDetection
from PIL import Image
import pyttsx3

processor = DetrImageProcessor.from_pretrained("facebook/detr-resnet-50")
model = DetrForObjectDetection.from_pretrained("facebook/detr-resnet-50")

engine = pyttsx3.init()

def speak(text):
    engine.say(text)
    engine.runAndWait()

def detect_objects(image_path):
    image = Image.open(image_path)
    inputs = processor(images=image, return_tensors="pt")
    outputs = model(**inputs)
    target_sizes = torch.tensor([image.size[::-1]])
    results = processor.post_process_object_detection(outputs, target_sizes=target_sizes, threshold=0.9)[0]
    return results

def draw_results(image_path, results):
    image = cv2.imread(image_path)
    for score, label, box in zip(results["scores"], results["labels"], results["boxes"]):
        label_name = processor.tokenizer.convert_ids_to_tokens(label.item())
        box = [round(i, 2) for i in box.tolist()]
        start_point = (int(box[0]), int(box[1]))
        end_point = (int(box[2]), int(box[3]))
        
        if label_name == "person":
            color = (0, 255, 0)  
        elif label_name == "car":
            color = (0, 0, 255) 
        else:
            color = (255, 255, 0) 
        
        cv2.rectangle(image, start_point, end_point, color, 2)
        text = f'{label_name} {round(score.item(), 3)}'
        cv2.putText(image, text, (int(box[0]), int(box[1]) - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
        
        if label_name == "car":
            speak(f"경고! 불법 주정차된 차량을 감지했습니다.")
        elif label_name == "person":
            speak(f"경고! 사람이 감지되었습니다.")
    
    cv2.imwrite('output_image.jpg', image)
    cv2.imshow('Detected Image', image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

def main():
    image_path = input("이미지 파일 경로를 입력하세요: ")
    results = detect_objects(image_path)
    draw_results(image_path, results)

if __name__ == "__main__":
    main()
